#Load packages
library(tidyverse)
library(tximport)
library(DESeq2)

## NOT data.frame BUT tibble
sample_table=read.csv("Sample_names.csv")

sample_files=paste0(pull(sample_table,'Sample.Name'),'_quant.sf')

gene_map=read.csv("gene_map.csv",col.names=c('enstid','ensgid'))

count_data = tximport(files=sample_files,
                     type="salmon",
                     tx2gene=gene_map,
                     ignoreTxVersion=TRUE) 
                   

count_data[['counts']]
count_data$counts

sample_table=as.data.frame(sample_table)
colnames(sample_table)[1]="Sample"
                
#y~x

#conditions=c('W','C')
#conditions=factor(conditions)
                  

deseq_dataset=DESeqDataSetFromTximport(txi=count_data,
                                       colData=sample_table,
                                       design= ~ Conditions)

counts(deseq_dataset)[1:6,1:3]
count_data$counts[1:6,1:3]

deseq_dataset=estimateSizeFactors(deseq_dataset)
normalizationFactors(deseq_dataset)
counts(deseq_dataset,normalized=TRUE)[1:6,1:3]

boxplot(counts(deseq_dataset,normalized=TRUE))
vst= varianceStabilizingTransformation(deseq_dataset)
boxplot(assay(vst))

#observe the SF3B4 effect
plotPCA(vst,intgroup='Conditions')+theme_bw()

d = assay(vst)
d=t(d)
d=dist(d)

h=hclust(d)
plot(h)

dds=deseq_dataset

#3 steps to DESeq2 analysis
#1)estimate size factors (normalisation)
#2) estimate dispersions
#3) apply stastistics (Wald Test)

dds=estimateDispersions(dds)
plotDispEsts(dds)

#step 3
dds=nbinomWaldTest(dds)

result_table=results(dds)
summary(result_table)
View(as.data.frame(result_table))

#result_table is Dataframe not a data.frame!
result_df=as.data.frame(result_table)

sum(complete.cases(result_df))

filter_df1= result_df[complete.cases(result_df),]
View(filter_df1)

#filter results
#padj <0,05
#log2FoldChange >1 <-1

filter_df1$padj < 0.05

filter_df2= filter_df1[filter_df1$padj <0.05,]

abs(filter_df2$log2FoldChange) >1

filter_df3=filter_df2[abs(filter_df2$log2FoldChange) > 1,]
